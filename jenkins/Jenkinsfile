node() {
    stage('Checkout Source') {
        sh 'rm -rf *'
        checkout scm
    }
    stage('Build') {
        sh 'mvn -B -DskipTests clean package'
    }
    stage('Test') {
        sh 'mvn test'
        junit 'target/surefire-reports/*.xml'
    }
    stage('Docker Build') {
        def ecr_repo_base = "<ecr_repository>"
        def app_name = sh (
            script: """
                mvn help:evaluate -Dexpression=project.name | grep "^[^\\[]"
            """,
            returnStdout: true
        ).trim()
        def app_version = sh (
            script: """
                mvn help:evaluate -Dexpression=project.version | grep "^[^\\[]"
            """,
            returnStdout: true
        ).trim()                
        // Push to ECR
        withCredentials([usernamePassword(credentialsId: 'jenkins-aws-user', usernameVariable: 'ACCESS_KEY', passwordVariable: 'SECRET_ACCESS_KEY')]) {
            sh '''
                aws configure set aws_access_key_id $ACCESS_KEY
                aws configure set aws_secret_access_key $SECRET_ACCESS_KEY
            '''
            sh """
                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ecr_repo_base}
                docker build --pull --no-cache . -t ${ecr_repo_base}/${app_name}:${app_version}
                docker push ${ecr_repo_base}/${app_name}:${app_version}
            """
        }
    }
    stage('Demonstrate AssumeRole'){
        withCredentials([usernamePassword(credentialsId: 'jenkins-aws-user', usernameVariable: 'ACCESS_KEY', passwordVariable: 'SECRET_ACCESS_KEY')]) {
            try {
                sh '''
                aws configure set aws_access_key_id $ACCESS_KEY
                aws configure set aws_secret_access_key $SECRET_ACCESS_KEY
                aws s3 ls
                '''
            } catch (err) {
                echo "Caught: ${err}"
            } 
            sh """
                set +x
                eval `aws sts assume-role --role-arn <role_arn> --role-session-name AWSCLISession --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' --output text | awk -F' ' '{print "export AWS_ACCESS_KEY_ID="\$1" export AWS_SECRET_ACCESS_KEY="\$2" export AWS_SESSION_TOKEN="\$3}'`
                set -x
                aws s3 ls
            """
        }
    }

    stage('Deploy to EKS Cluster'){
        withCredentials([usernamePassword(credentialsId: 'jenkins-aws-user', usernameVariable: 'ACCESS_KEY', passwordVariable: 'SECRET_ACCESS_KEY')]) {
            sh '''
                aws configure set aws_access_key_id $ACCESS_KEY
                aws configure set aws_secret_access_key $SECRET_ACCESS_KEY
                aws eks --region us-east-1 update-kubeconfig --name eks-blueprint  --role-arn <role_arn>
                kubectl apply -f app.yaml
            '''
        }
    }
}
